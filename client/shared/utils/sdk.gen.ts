// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetApiGameData, GetApiGameResponse, PostApiGameData, PostApiGameResponse, GetApiUserData, GetApiUserResponse, PostApiUserData, PostApiUserResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all games
 * Retrieves all games from the system
 */
export const getApiGame = <ThrowOnError extends boolean = false>(options?: Options<GetApiGameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiGameResponse, unknown, ThrowOnError>({
        url: '/api/game',
        ...options
    });
};

/**
 * Create a new game
 * Creates a new dart game and sets up the corresponding hub
 */
export const postApiGame = <ThrowOnError extends boolean = false>(options: Options<PostApiGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiGameResponse, unknown, ThrowOnError>({
        url: '/api/game',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all players
 * Retrieves all players from the system
 */
export const getApiUser = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUserResponse, unknown, ThrowOnError>({
        url: '/api/user',
        ...options
    });
};

/**
 * Create a new player
 * Creates a new player in the system
 */
export const postApiUser = <ThrowOnError extends boolean = false>(options: Options<PostApiUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiUserResponse, unknown, ThrowOnError>({
        url: '/api/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};